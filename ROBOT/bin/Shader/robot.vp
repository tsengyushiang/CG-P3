// ADS Point lighting Shader
// Vertex Shader
// Richard S. Wright Jr.
// OpenGL SuperBible
#version 330

layout(location = 0) in vec3 vPosition;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal;

uniform MatVP{
	mat4 View;
	mat4 Projection;
};
uniform mat4 Model;
uniform float time;

// Color to fragment program
out vec3 vVaryingNormal;
out vec3 vVaryingLightDir;
out vec2 UV;

//===============================Cubemap
out vec3 Normal;
out vec3 Position;

void main(void) 
{ 	
	vec3 vLightPosition = vec3(10.0,10.0,10.0);	
	//vec3 vLightPosition = vec3(cos(time)*100,0,sin(time)*100);

	mat4 MVP = Projection*View*Model;
	mat4 MV = View*Model;

	vLightPosition=vec3(MV*vec4(vLightPosition,1));

    // Get surface normal in eye coordinates
	//normal matrix is MV matrix's 3*3 excluding 'w' 
	mat3 normalMatrix = mat3(MV);
    vVaryingNormal = normalMatrix * vertexNormal;

    // Get vertex position in eye coordinates
    vec4 vPosition4 = MV * vec4(vPosition,1);
    vec3 vPosition3 = vPosition4.xyz / vPosition4.w;

    // Get vector to light source
    vVaryingLightDir = normalize(vLightPosition - vPosition3);

	UV = vertexUV;
    // Don't forget to transform the geometry!

	//for cubemap
	Normal = mat3(transpose(inverse(Model))) * vertexNormal;
    Position = vec3(MV * vec4(vPosition,1));

    gl_Position = MVP * vec4(vPosition,1);



}
